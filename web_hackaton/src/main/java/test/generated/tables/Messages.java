/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Atom;
import test.generated.Indexes;
import test.generated.Keys;
import test.generated.tables.records.MessagesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Messages extends TableImpl<MessagesRecord> {

    private static final long serialVersionUID = 833693122;

    /**
     * The reference instance of <code>atom.messages</code>
     */
    public static final Messages MESSAGES = new Messages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessagesRecord> getRecordType() {
        return MessagesRecord.class;
    }

    /**
     * The column <code>atom.messages.id</code>.
     */
    public final TableField<MessagesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>atom.messages.msg_username</code>.
     */
    public final TableField<MessagesRecord, String> MSG_USERNAME = createField("msg_username", org.jooq.impl.SQLDataType.VARCHAR(75).nullable(false), this, "");

    /**
     * The column <code>atom.messages.msg_text</code>.
     */
    public final TableField<MessagesRecord, String> MSG_TEXT = createField("msg_text", org.jooq.impl.SQLDataType.VARCHAR(75), this, "");

    /**
     * The column <code>atom.messages.msg_time</code>.
     */
    public final TableField<MessagesRecord, String> MSG_TIME = createField("msg_time", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>atom.messages</code> table reference
     */
    public Messages() {
        this(DSL.name("messages"), null);
    }

    /**
     * Create an aliased <code>atom.messages</code> table reference
     */
    public Messages(String alias) {
        this(DSL.name(alias), MESSAGES);
    }

    /**
     * Create an aliased <code>atom.messages</code> table reference
     */
    public Messages(Name alias) {
        this(alias, MESSAGES);
    }

    private Messages(Name alias, Table<MessagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Messages(Name alias, Table<MessagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Messages(Table<O> child, ForeignKey<O, MessagesRecord> key) {
        super(child, key, MESSAGES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Atom.ATOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGES_ID_UNIQUE, Indexes.MESSAGES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MessagesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MESSAGES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MessagesRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MessagesRecord>> getKeys() {
        return Arrays.<UniqueKey<MessagesRecord>>asList(Keys.KEY_MESSAGES_PRIMARY, Keys.KEY_MESSAGES_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Messages as(String alias) {
        return new Messages(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Messages as(Name alias) {
        return new Messages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Messages rename(String name) {
        return new Messages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Messages rename(Name name) {
        return new Messages(name, null);
    }
}
